#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PATH
export DEBIAN_FRONTEND="noninteractive"
dpkg -i /mnt/machine-emulator-tools-v0.12.0.deb
mkdir -p /usr/local/bin/
cp /mnt/nerdctl /usr/bin
cp /mnt/containerd-stargz-grpc /usr/local/bin
cp /mnt/ctr-remote /usr/bin
cp /mnt/build* /usr/bin
chmod +x /usr/bin/nerdctl
chmod +x /usr/local/bin/containerd-stargz-grpc
chmod +x /usr/bin/ctr-remote
chmod +x /usr/bin/build*
cp -rv /mnt/stargz-config/* /
echo "" >> /etc/containerd-stargz-grpc/config.toml
echo "ipfs = true" >> /etc/containerd-stargz-grpc/config.toml
echo "no_background_fetch = true" >> /etc/containerd-stargz-grpc/config.toml

cat > /etc/systemd/system/buildkit.service << EOF
[Unit]
Description=BuildKit
Requires=buildkit.socket containerd.service stargz-snapshotter.service
After=buildkit.socket stargz-snapshotter.service
Documentation=https://github.com/moby/buildkit

[Service]
Type=notify
ExecStart=/usr/bin/buildkitd --addr fd:// --oci-worker-snapshotter=stargz --oci-worker=true --containerd-worker=false --oci-worker-proxy-snapshotter-path=/run/containerd-stargz-grpc/containerd-stargz-grpc.sock

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/buildkit.socket << EOF
[Unit]
Description=BuildKit
Documentation=https://github.com/moby/buildkit

[Socket]
ListenStream=%t/buildkit/buildkitd.sock
SocketMode=0660

[Install]
WantedBy=sockets.target
EOF

cat > /etc/systemd/network/20-eth0.network << EOF
[Match]
Name=eth0

[Network]
DHCP=yes

[Link]
RequiredForOnline=no
ActivationPolicy=always-up

EOF

systemctl enable stargz-snapshotter
systemctl enable buildkit.socket
systemctl enable buildkit.service
systemctl enable systemd-networkd.service

echo -n "Enabled.."


/opt/cartesi/bin/rndaddentropy < /opt/cartesi/var/run/random-seed

cat > /opt/cartesi/bin/run-docker.sh << EOF
#!/bin/bash
export IPFS_PATH=/root/.ipfs
export HTTP_DATASTORE_URL=http://127.0.0.1:5004/ipfs
export IO_DEVICE=/dev/mtdblock1
mkdir -p /opt/rollup-store
mkdir -p /opt/rollup-cache
/usr/bin/ipfs init /etc/ipfs-config
/usr/bin/ipfs daemon --offline &
echo "Waiting for IPFS"
IPFS_HOST="127.0.0.1"
IPFS_PORT="5001"

while true; do
	nc -z "\$IPFS_HOST" "\$IPFS_PORT"
        RET=\$?
        echo \$RET
        if [ x\$RET = x0 ]; then
           break
        fi
        sleep 1
done
echo "IPFS up"
echo "Asking for app to guest tools which would set CID of /app"
curl http://127.0.0.1:5004/get_app > /dev/null
ipfs files read /app/boot-script > /tmp/boot-script
chmod +x /tmp/boot-script
cat /tmp/boot-script
/tmp/boot-script
EOF
chmod +x /opt/cartesi/bin/run-docker.sh

find /usr/share/doc -depth -type f ! -name copyright|xargs rm || true
find /usr/share/doc -empty|xargs rmdir || true
rm -rf /usr/share/groff/* /usr/share/info/*
rm -rf /usr/share/lintian/* /usr/share/linda/* /var/cache/man/*
rm -rf /var/cache/apt/*.bin
mv /usr/share/locale/en /tmp/en
rm -rf /usr/share/locale/*
rm -rf /usr/share/consolefonts/*

mv /tmp/en /usr/share/locale/en
locale-gen
dpkg --remove ubuntu-minimal
dpkg --remove ubuntu-advantage-tools
dpkg --purge python3.10  python3 netplan.io lsb-release networkd-dispatcher python3-apt python3-dbus python3-gi python3-netifaces python3-pkg-resources python3-yaml libpython3-stdlib:riscv64 libpython3.10-stdlib python3.10-minimal python3-minimal
find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete
find /usr/share/i18n/locales/ -type f ! -name en_US ! -name en_GB ! -name i18n* ! -name iso14651_t1 ! -name iso14651_t1_common ! -name 'translit_*' -delete && echo 'en_US.UTF-8 UTF-8' > /usr/share/i18n/SUPPORTED
rm -rf /usr/share/man/* /usr/share/doc/* /usr/share/X11/*
cat > /etc/fstab << EOF
/dev/mtdblock0 / ext4 defaults,noatime,ro 1 1
EOF
cat > /etc/docker/daemon.json  << EOF
{
"log-driver": "journald",
"log-opts": {
"tag": "{{.Name}}"
},
"bip": "172.26.0.1/16"
}
EOF
mkfs.ext4 -O ^has_journal /dev/mtdblock2
mkdir -p /dev/tmp
mount -t tmpfs tmpfs /dev/tmp 
mkdir -p /dev/tmp/mnt
mount /dev/mtdblock2 /dev/tmp/mnt
tar --one-file-system -pcf - / | tar -C /dev/tmp/mnt/ -xf -
umount /dev/tmp/mnt
sync
